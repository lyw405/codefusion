// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // 项目管理相关
  projectMemberships ProjectMember[]
  ownedProjects       Project[]        @relation("ProjectOwner")
  activities         ProjectActivity[]
  
  // 仓库权限相关
  repositoryPermissions RepositoryPermission[]
  
  // Pull Request 相关
  authoredPRs    PullRequest[] @relation("PRAuthor")
  assignedPRs    PullRequest[] @relation("PRAssignee")
  reviewingPRs   PRReviewer[]  @relation("PRReviewer")
  prComments     PRComment[]   @relation("PRCommentAuthor")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 项目管理系统
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  status      ProjectStatus @default(PLANNING)
  visibility  ProjectVisibility @default(PRIVATE)
  
  // 关联关系
  ownerId     String
  owner       User     @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     ProjectMember[]
  repositories Repository[]
  deployments Deployment[]
  activities  ProjectActivity[]
  projectSettings ProjectSettings?
  
  // Pull Requests
  pullRequests PullRequest[]
  
  // 统计信息
  totalCommits    Int @default(0)
  totalPRs        Int @default(0)
  totalDeployments Int @default(0)
  successRate     Float @default(0)
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("projects")
}

// 项目成员模型 - 项目级权限管理
model ProjectMember {
  id        String   @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  invitedBy String?  // 邀请人ID
  
  // 权限配置
  canManageMembers    Boolean @default(false) // 是否可以管理成员
  canManageRepositories Boolean @default(false) // 是否可以管理仓库
  canDeploy           Boolean @default(false) // 是否可以部署
  canReview           Boolean @default(false) // 是否可以审查代码
  
  // 关联关系
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

// 代码仓库模型 - 属于项目
model Repository {
  id            String   @id @default(cuid())
  name          String
  description String?
  url           String
  provider      GitProvider
  providerId  String?  // GitHub/GitLab 仓库 ID
  defaultBranch String @default("main")
  isPrivate   Boolean  @default(true)
  
  // 仓库类型
  type        RepositoryType @default(FRONTEND)
  
  // 同步配置
  autoSync    Boolean @default(true)
  syncInterval Int    @default(300) // 同步间隔（秒）
  
  // 本地克隆信息
  localPath   String?  // 本地克隆路径
  isCloned   Boolean  @default(false)
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastSyncAt  DateTime?
  
  // 关联关系
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // 部署配置
  deployments Deployment[]
  
  // 仓库权限
  permissions RepositoryPermission[]
  
  // Pull Requests
  pullRequests PullRequest[]
  
  @@unique([projectId, providerId])
  @@index([projectId])
  @@index([providerId])
  @@map("repositories")
}

// 仓库权限模型 - 细粒度的仓库权限控制
model RepositoryPermission {
  id        String   @id @default(cuid())
  role      RepositoryRole @default(READ)
  grantedAt DateTime @default(now())
  grantedBy String   // 授权人ID
  
  // 关联关系
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([repositoryId, userId])
  @@index([repositoryId])
  @@index([userId])
}

// 部署模型
model Deployment {
  id          String   @id @default(cuid())
  name        String
  environment DeploymentEnvironment
  status      DeploymentStatus @default(PENDING)
  branch      String
  commit      String?
  commitMessage String?
  
  // 部署配置
  config      String? // JSON 格式存储部署配置
  
  // 构建信息
  buildTime   Int?     // 构建时间（秒）
  buildLog    String?  // 构建日志
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deployedAt  DateTime?
  
  // 关联关系
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repositoryId String?
  repository  Repository? @relation(fields: [repositoryId], references: [id], onDelete: SetNull)
  
  @@index([projectId])
  @@index([status])
  @@index([environment])
  @@map("deployments")
}

// 项目活动模型
model ProjectActivity {
  id        String   @id @default(cuid())
  type      ActivityType
  title     String
  description String?
  metadata  String? // JSON 格式存储活动元数据
  
  // 时间戳
  createdAt DateTime @default(now())
  
  // 关联关系
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([userId])
  @@index([createdAt])
  @@map("project_activities")
}

// 项目设置模型
model ProjectSettings {
  id String @id @default(cuid())
  
  // 通知设置
  emailNotifications Boolean @default(true)
  slackNotifications  Boolean @default(false)
  slackWebhook       String?
  
  // 部署设置
  autoDeploy         Boolean @default(false)
  deployOnPush       Boolean @default(false)
  requiredReviews    Int     @default(1)
  
  // 代码质量设置
  enableCodeReview   Boolean @default(true)
  enableLinting      Boolean @default(true)
  enableTesting      Boolean @default(true)
  
  // 仓库设置
  allowFork          Boolean @default(true)
  allowPublicAccess  Boolean @default(false)
  
  // 关联关系
  projectId String @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Pull Request 模型
model PullRequest {
  id          String   @id @default(cuid())
  title       String
  description String?
  number      Int      // 将在创建时通过应用逻辑设置
  
  // 分支信息
  sourceBranch String
  targetBranch String
  
  // 状态
  status      PRStatus @default(OPEN)
  isDraft     Boolean  @default(false)
  
  // 审查信息
  reviewers   PRReviewer[]
  comments    PRComment[]
  
  // 统计信息 (快照，不依赖实时计算)
  filesChanged Int @default(0)
  additions    Int @default(0)
  deletions    Int @default(0)
  
  // 元数据
  labels      String?  // JSON 格式存储标签数组
  metadata    String?  // JSON 格式存储其他元数据
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  closedAt  DateTime?
  mergedAt  DateTime?
  
  // 关联关系
  projectId    String
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  authorId     String
  author       User       @relation("PRAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  assigneeId   String?
  assignee     User?      @relation("PRAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  
  @@unique([repositoryId, number])
  @@index([projectId])
  @@index([repositoryId])
  @@index([authorId])
  @@index([status])
  @@index([createdAt])
  @@map("pull_requests")
}

// PR 审查者模型
model PRReviewer {
  id       String   @id @default(cuid())
  status   ReviewStatus @default(PENDING)
  
  // 审查时间
  reviewedAt DateTime?
  
  // 关联关系
  pullRequestId String
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  reviewerId    String
  reviewer      User        @relation("PRReviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  
  @@unique([pullRequestId, reviewerId])
  @@index([pullRequestId])
  @@index([reviewerId])
  @@map("pr_reviewers")
}

// PR 评论模型
model PRComment {
  id       String   @id @default(cuid())
  content  String
  type     CommentType @default(GENERAL)
  
  // 代码位置信息 (可选，用于行级评论)
  filePath String?
  lineNumber Int?
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 关联关系
  pullRequestId String
  pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id], onDelete: Cascade)
  authorId      String
  author        User        @relation("PRCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  
  // 回复关系
  parentId   String?  // 父评论ID
  parent     PRComment? @relation("PRCommentReplies", fields: [parentId], references: [id])
  replies    PRComment[] @relation("PRCommentReplies")
  
  @@index([pullRequestId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
  @@map("pr_comments")
}

// 枚举类型定义
enum ProjectStatus {
  PLANNING     // 规划中
  DEVELOPMENT  // 开发中
  TESTING      // 测试中
  STAGING      // 预发布
  PRODUCTION   // 生产环境
  ARCHIVED     // 已归档
}

enum ProjectVisibility {
  PRIVATE      // 私有
  TEAM         // 团队可见
  PUBLIC       // 公开
}

enum ProjectRole {
  OWNER        // 所有者 - 拥有所有权限
  ADMIN        // 管理员 - 可以管理项目，但不能添加管理员
  DEVELOPER    // 开发者 - 可以开发、部署
  REVIEWER     // 审查者 - 可以审查代码
  MEMBER       // 成员 - 基本访问权限
  VIEWER       // 查看者 - 只读权限
}

enum GitProvider {
  GITHUB
  GITLAB
  BITBUCKET
  GITEE
}

enum RepositoryType {
  FRONTEND     // 前端
  BACKEND      // 后端
  MOBILE       // 移动端
  DOCUMENTATION // 文档
  INFRASTRUCTURE // 基础设施
  TOOLS        // 工具
  OTHER        // 其他
}

enum RepositoryRole {
  ADMIN        // 管理员 - 完全控制
  WRITE        // 写入 - 可以推送代码
  READ         // 读取 - 只能查看
  NONE         // 无权限
}

enum DeploymentEnvironment {
  DEVELOPMENT  // 开发环境
  STAGING      // 预发布环境
  PRODUCTION   // 生产环境
  PREVIEW      // 预览环境
}

enum DeploymentStatus {
  PENDING      // 等待中
  RUNNING      // 执行中
  SUCCESS      // 部署成功
  FAILED       // 部署失败
  CANCELLED    // 已取消
}

enum ActivityType {
  PROJECT_CREATED     // 项目创建
  MEMBER_ADDED        // 成员添加
  MEMBER_REMOVED      // 成员移除
  MEMBER_ROLE_CHANGED // 成员角色变更
  REPOSITORY_ADDED    // 仓库添加
  REPOSITORY_REMOVED  // 仓库移除
  DEPLOYMENT_STARTED  // 部署开始
  DEPLOYMENT_SUCCESS  // 部署成功
  DEPLOYMENT_FAILED   // 部署失败
  CODE_REVIEW         // 代码审查
  BRANCH_CREATED      // 分支创建
  MERGE_REQUEST       // 合并请求
  PROJECT_SETTINGS_CHANGED // 项目设置变更
  PR_CREATED          // PR 创建
  PR_MERGED           // PR 合并
  PR_CLOSED           // PR 关闭
  PR_REVIEWED         // PR 审查
}

// PR 状态枚举
enum PRStatus {
  OPEN        // 开放
  CLOSED      // 已关闭
  MERGED      // 已合并
  DRAFT       // 草稿
}

// 审查状态枚举
enum ReviewStatus {
  PENDING     // 待审查
  APPROVED    // 已批准
  REJECTED    // 已拒绝
  COMMENTED   // 已评论
}

// 评论类型枚举
enum CommentType {
  GENERAL     // 常规评论
  CODE_LINE   // 代码行评论
  SUGGESTION  // 建议
  REVIEW      // 审查评论
}
